///////////////////////////////////////////
// RORO : Receive an Object, Return an Object
// 오브젝트로 주고 오브젝트로 반환하기

// 파라미터에 기본값을 줄때는 = 으로 주고 아규먼트로 전달될 부분에서는 :로 줘야함.
// 파라미터는 적으면 생성이 되는 느낌.
function mob({ x = 10, y = 10, hp = 300, mp = 300 }) {
    console.log(x, y, hp, mp);
}

// mob(10, 20, 100, 200, 100, 10, 'hojun', 100)
// 이런식으로 함수에서 단순히 인자로만 받으면 뭐에 무슨값이 들어가는지 알기 힘듬
// 또한 순서를 바꿔서 넣는다거나 하는것도 불가능함.

// RORO로 쓰면 들어가는 값이 뭔지도 명확해지고
// 순서를 바꾸거나 값을 안주는것도 가능.
mob({ x: 200, y: 200, hp: 300, mp: 400 });
mob({ hp: 600, mp: 0 });
mob({ mp: 400, hp: 300, x: 200, y: 200 });

// 전부 초기값으로 쓰고싶을떄
// mob() 이건 에러 mob({})로 써야함.
// 이것도 회피하려면 이런식으로 {파라미터} = {} 로 파라미터를 선언해야함.
function mob2({ x = 10 } = {}) {
    console.log(x);
}

// 설명
// O
function 함수(a = 10, b = 20, c = 30) {
    return a + b + c;
}
함수();

// X
function 함수({ a = 10, b = 20, c = 30 }) {
    return a + b + c;
}
함수();

// O
function 함수({ a = 10, b = 20, c = 30 }) {
    return a + b + c;
}
함수({}); // 이 코드를 축소한 코드가 위의 코드입니다.
// 참고삼아서만 알아두세요.
// let {one = 1, two = 2} = {one:100}
// let {one = 1, two = 2} = {}
// let {a=10, b=20, c=30} = undefined
